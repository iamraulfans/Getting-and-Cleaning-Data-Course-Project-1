add2 <- function(x, y) {
x + y
}
add2(3, 5)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
NOT 5 == 7
NOT(5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | с(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("My", "name", "is", "Dinara")
submit()
mad_libs(place = "Yekaterinburg", adjective = "nasty", noun = "Windows 10")
submit()
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
?file.path
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)$virginica
tapply(iris$Sepal.Length, iris$Species, mean)[[virginica]]
tapply(iris$Sepal.Length, iris$Species, mean)[virginica]
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
?mean
?with
with(mtcars, tapply(mpg, cyl , mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
abs(82.63636 - 209.21429)
debug(ls)
ls()
set.seed(1)
rpois(5, 2)
?set.seed
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(xlsx)
library(xlsx)
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
library(xlsx)
library(xlsx)
library(xlsx)
library(rJava)
Sys.getenv("JAVA_HOME")
library(xlsx)
library(xlsx)
install.packages("RMySQL")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
library(dplyr)
library(tidyr)
measurements_train <- read.table("./train/X_train.txt", colClasses = "numeric")
labels_train <- read.table("./train/y_train.txt", colClasses = "numeric")
subjects_train <- read.table("./train/subject_train.txt", colClasses
= "numeric")
measurements_test <- read.table("./test/X_test.txt", colClasses = "numeric")
labels_test <- read.table("./test/y_test.txt", colClasses = "numeric")
subjects_test <- read.table("./test/subject_test.txt", colClasses = "numeric")
measurements <- rbind(measurements_train, measurements_test)
labels <- rbind(labels_train, labels_test)
subjects <- rbind(subjects_train, subjects_test)
features <- read.table("./features.txt", colClasses = c("numeric",
"character"))[, 2]
names(measurements) <- features
names(labels) <- "label"
names(subjects) <- "subject"
mean_std_vector <- grepl("mean\\()|std\\()", features)
measurements <- measurements[mean_std_vector]
activity_labels <- read.table("./activity_labels.txt",
col.names = c("label", "activity"),
colClasses = c("numeric", "factor"))
activity <- merge(labels, activity_labels)$activity
mergedData <- cbind(measurements, activity, subjects)
tidyData <- tbl_df(mergedData) %>%
gather(variable, value, -c(activity, subject)) %>%
group_by(variable, activity, subject) %>%
summarize(mean(value))
write.table(tidyData, "tidy_data.txt", quote = FALSE, row.names = FALSE)
setwd("~/Desktop/Coursera/UCI HAR Dataset")
library(dplyr)
library(tidyr)
measurements_train <- read.table("./train/X_train.txt", colClasses = "numeric")
labels_train <- read.table("./train/y_train.txt", colClasses = "numeric")
subjects_train <- read.table("./train/subject_train.txt", colClasses
= "numeric")
measurements_test <- read.table("./test/X_test.txt", colClasses = "numeric")
labels_test <- read.table("./test/y_test.txt", colClasses = "numeric")
subjects_test <- read.table("./test/subject_test.txt", colClasses = "numeric")
measurements <- rbind(measurements_train, measurements_test)
labels <- rbind(labels_train, labels_test)
subjects <- rbind(subjects_train, subjects_test)
features <- read.table("./features.txt", colClasses = c("numeric",
"character"))[, 2]
names(measurements) <- features
names(labels) <- "label"
names(subjects) <- "subject"
mean_std_vector <- grepl("mean\\()|std\\()", features)
measurements <- measurements[mean_std_vector]
activity_labels <- read.table("./activity_labels.txt",
col.names = c("label", "activity"),
colClasses = c("numeric", "factor"))
activity <- merge(labels, activity_labels)$activity
mergedData <- cbind(measurements, activity, subjects)
tidyData <- tbl_df(mergedData) %>%
gather(variable, value, -c(activity, subject)) %>%
group_by(variable, activity, subject) %>%
summarize(mean(value))
write.table(tidyData, "tidy_data.txt", quote = FALSE, row.names = FALSE)
